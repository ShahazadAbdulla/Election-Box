#include <Adafruit_Fingerprint.h>#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)#include <SoftwareSerial.h>SoftwareSerial mySerial(2, 3);#else#define mySerial Serial1#endifAdafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);void setup() {  Serial.begin(9600);  while (!Serial);  delay(100);    Serial.println("\nFingerprint System Ready");  finger.begin(57600);  delay(5);  if (finger.verifyPassword()) {    Serial.println("Fingerprint sensor found!");  } else {    Serial.println("Fingerprint sensor not found.");    while (1);  }  finger.getTemplateCount();  Serial.print("Stored fingerprints: "); Serial.println(finger.templateCount);  showMenu();}void loop() {  if (Serial.available()) {    char command = Serial.read();    Serial.read(); // Clear buffer    switch (command) {      case 'E': enrollFingerprint(); break;      case 'M': matchFingerprint(); break;      case 'D': deleteFingerprint(); break;      case 'C': clearAllFingerprints(); break;      default: Serial.println("Invalid command! Try again.");    }    showMenu();  // Show menu again after operation  }}void showMenu() {  Serial.println("\nEnter a command:");  Serial.println("'E' to Enroll, 'M' to Match, 'D' to Delete a Fingerprint, 'C' to Clear All");}void enrollFingerprint() {  Serial.println("Place finger on sensor for enrollment...");  if (captureFingerprint(1) != FINGERPRINT_OK) return;  Serial.println("Remove finger...");  delay(2000);  while (finger.getImage() != FINGERPRINT_NOFINGER);  Serial.println("Place same finger again...");  if (captureFingerprint(2) != FINGERPRINT_OK) return;  if (finger.createModel() != FINGERPRINT_OK) {    Serial.println("Fingerprints did not match.");    return;  }  int id = -1;  while (id < 1 || id > 127) {    Serial.println("Enter an ID (1-127) to store the fingerprint:");    while (!Serial.available());  // Wait for input    id = Serial.parseInt();    Serial.read(); // Clear buffer    if (id < 1 || id > 127) {      Serial.println("Invalid ID! Must be between 1 and 127.");    }  }  if (finger.storeModel(id) == FINGERPRINT_OK) {    Serial.println("Enrollment successful! Fingerprint stored at ID: " + String(id));  } else {    Serial.println("Failed to store fingerprint.");  }}void matchFingerprint() {  Serial.println("Place finger for verification...");  if (captureFingerprint(1) != FINGERPRINT_OK) return;  if (finger.fingerSearch() == FINGERPRINT_OK) {    Serial.print("Match found! ID: "); Serial.print(finger.fingerID);    Serial.print(" Confidence: "); Serial.println(finger.confidence);  } else {    Serial.println("No match found.");  }}void deleteFingerprint() {  int id = -1;  while (id < 1 || id > 127) {    Serial.println("Enter the ID to delete:");    while (!Serial.available());  // Wait for input    id = Serial.parseInt();    Serial.read(); // Clear buffer    if (id < 1 || id > 127) {      Serial.println("Invalid ID! Try again.");    }  }  if (finger.deleteModel(id) == FINGERPRINT_OK) {    Serial.println("Fingerprint deleted successfully.");  } else {    Serial.println("Failed to delete fingerprint.");  }}void clearAllFingerprints() {  Serial.println("Clearing all fingerprints...");  if (finger.emptyDatabase() == FINGERPRINT_OK) {    Serial.println("All fingerprints deleted!");  } else {    Serial.println("Failed to clear fingerprints.");  }}uint8_t captureFingerprint(uint8_t slot) {  int p = -1;  Serial.print("Capturing fingerprint...");    while (p != FINGERPRINT_OK) {    p = finger.getImage();    if (p == FINGERPRINT_NOFINGER) Serial.print(".");    delay(50);  }  Serial.println("\nImage taken.");  p = finger.image2Tz(slot);  if (p != FINGERPRINT_OK) {    Serial.println("Error processing image.");    return p;  }  Serial.println("Image processed.");  return FINGERPRINT_OK;}